<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="SBUYIn!h]=@w`[dRX.K+" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="zX^~S@:/8*$PJJU89f2!"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace randomMusic {" line1="    /**" line2="     * Play a random sound effect" line3="     */" line4="    //% block=&quot;play random sound effect&quot;" line5="    export function playRandomSound(): void {" line6="        const m1 = randint(100, 1000)" line7="        const m2 = randint(100, 500)" line8="        const m3 = randint(100, 1000)" line9="        music.play(music.createSoundEffect(" line10="            WaveShape.Sine," line11="            m1," line12="            m3," line13="            255," line14="            0," line15="            m2," line16="            SoundExpressionEffect.None," line17="            InterpolationCurve.Linear" line18="        ), music.PlaybackMode.UntilDone)" line19="    }" line20="" line21="    /**" line22="     * Play a sequence of random sound effects with rhythm" line23="     */" line24="    //% block=&quot;play random rhythm sequence&quot;" line25="    export function playRandomRhythm(): void {" line26="        const beatDurations = [" line27="            music.beat(BeatFraction.Whole)," line28="            music.beat(BeatFraction.Half)," line29="            music.beat(BeatFraction.Quarter)," line30="            music.beat(BeatFraction.Eighth)" line31="        ]" line32="        for (let i = 0; i &lt; 8; i++) {" line33="            const m12 = randint(100, 1000)" line34="            const m22 = randint(100, 500)" line35="            const m32 = randint(100, 1000)" line36="            const duration = beatDurations[randint(0, beatDurations.length - 1)]" line37="            music.play(music.createSoundEffect(" line38="                WaveShape.Sine," line39="                m12," line40="                m32," line41="                255," line42="                0," line43="                m22," line44="                SoundExpressionEffect.None," line45="                InterpolationCurve.Linear" line46="            ), music.PlaybackMode.UntilDone)" line47="            pause(duration)" line48="        }" line49="    }" line50="}" numlines="51"></mutation></block></statement></block></xml>